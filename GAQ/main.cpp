#include "Examples.h"

#include <chrono>

int main()
{
	GAQ::GenerateGeneratingBlades(); //create an array of basis vectors in R^{9,6}... one, e1,e2,...,e15 - has to be called first!
	
	/* --------------------------USAGE--------------------------
	GAQ multivecorExample1 = 2 * one + 3 * e1 * e2 - e3 + e11 - 3 * ei1 + 2 * eo6;
	GAQ multivecorExample2 = -1 * one + 2 * e1 * e5 - e9 + e15 - 3 * ei3 + 2 * eo2;
	GAQ multivecorExample3 = multivecorExample1 * multivecorExample2;
	GAQ multivecorExample4 = 3 * multivecorExample2 + eo1;
	*/
	
	//RotorXY();
	//RotorXZ();
	//RotorYZ();
	//TranslatorX();
	//TranslatorY();
	//TranslatorZ();

	GAQ rotorXY = rxy.RotorExponential(20, std::numbers::pi / 4);

	GAQ expected = 0.39429 * one + 0.16332 * (e1 * e2) - 0.16332 * (e1 * e2 * e11 * e13) + 0.06765 * (e1 * e2 * e11 * e13 * e14 * e15)
		- 0.04083 * (e1 * e2 * e12 * e13) + 0.016912 * (e1 * e2 * e12 * e13 * e14 * e15) - 0.06765 * (e1 * e2 * e14 * e15)
		+ 0.04083 * (e1 * e2 * e5 * e6 * e7 * e13) - 0.016912 * (e1 * e2 * e5 * e6 * e7 * e13 * e14 * e15)
		+ 0.016912 * (e1 * e2 * e5 * e6 * e7 * e8 * e9 * e13) - 0.007005 * (e1 * e2 * e5 * e6 * e7 * e8 * e9 * e13 * e14 * e15)
		+ 0.16332 * (e1 * e2 * e5 * e7) - 0.16332 * (e1 * e2 * e5 * e7 * e11 * e13) + 0.06765 * (e1 * e2 * e5 * e7 * e11 * e13 * e14 * e15)
		- 0.04083 * (e1 * e2 * e5 * e7 * e12 * e13) + 0.016912 * (e1 * e2 * e5 * e7 * e12 * e13 * e14 * e15) - 0.06765 * (e1 * e2 * e5 * e7 * e14 * e15)
		+ 0.06765 * (e1 * e2 * e5 * e7 * e8 * e9) - 0.06765 * (e1 * e2 * e5 * e7 * e8 * e9 * e11 * e13) + 0.028021 * (e1 * e2 * e5 * e7 * e8 * e9 * e11 * e13 * e14 * e15)
		- 0.016912 * (e1 * e2 * e5 * e7 * e8 * e9 * e12 * e13) + 0.007005 * (e1 * e2 * e5 * e7 * e8 * e9 * e12 * e13 * e14 * e15)
		- 0.028021 * (e1 * e2 * e5 * e7 * e8 * e9 * e14 * e15) - 0.04083 * (e1 * e2 * e6 * e13) + 0.016912 * (e1 * e2 * e6 * e13 * e14 * e15)
		+ 0.04083 * (e1 * e2 * e6 * e7) - 0.04083 * (e1 * e2 * e6 * e7 * e11 * e13) + 0.016912 * (e1 * e2 * e6 * e7 * e11 * e13 * e14 * e15)
		- 0.016912 * (e1 * e2 * e6 * e7 * e14 * e15) + 0.016912 * (e1 * e2 * e6 * e7 * e8 * e9) - 0.016912 * (e1 * e2 * e6 * e7 * e8 * e9 * e11 * e13)
		+ 0.007005 * (e1 * e2 * e6 * e7 * e8 * e9 * e11 * e13 * e14 * e15) - 0.007005 * (e1 * e2 * e6 * e7 * e8 * e9 * e14 * e15)
		- 0.016912 * (e1 * e2 * e6 * e8 * e9 * e13) + 0.007005 * (e1 * e2 * e6 * e8 * e9 * e13 * e14 * e15) - 0.04083 * (e1 * e2 * e7 * e11 * e12 * e13)
		+ 0.016912 * (e1 * e2 * e7 * e11 * e12 * e13 * e14 * e15) - 0.04083 * (e1 * e2 * e7 * e12) + 0.016912 * (e1 * e2 * e7 * e12 * e14 * e15)
		- 0.016912 * (e1 * e2 * e7 * e8 * e9 * e11 * e12 * e13) + 0.007005 * (e1 * e2 * e7 * e8 * e9 * e11 * e12 * e13 * e14 * e15)
		- 0.016912 * (e1 * e2 * e7 * e8 * e9 * e12) + 0.007005 * (e1 * e2 * e7 * e8 * e9 * e12 * e14 * e15) + 0.06765 * (e1 * e2 * e8 * e9)
		- 0.06765 * (e1 * e2 * e8 * e9 * e11 * e13) + 0.028021 * (e1 * e2 * e8 * e9 * e11 * e13 * e14 * e15) - 0.016912 * (e1 * e2 * e8 * e9 * e12 * e13)
		+ 0.007005 * (e1 * e2 * e8 * e9 * e12 * e13 * e14 * e15) - 0.028021 * (e1 * e2 * e8 * e9 * e14 * e15) - 0.39429 * (e11 * e13)
		+ 0.16332 * (e11 * e13 * e14 * e15) - 0.098573 * (e12 * e13) + 0.04083 * (e12 * e13 * e14 * e15) - 0.16332 * (e14 * e15)
		+ 0.098573 * (e5 * e6 * e7 * e13) - 0.04083 * (e5 * e6 * e7 * e13 * e14 * e15) + 0.04083 * (e5 * e6 * e7 * e8 * e9 * e13)
		- 0.016912 * (e5 * e6 * e7 * e8 * e9 * e13 * e14 * e15) + 0.39429 * (e5 * e7) - 0.39429 * (e5 * e7 * e11 * e13)
		+ 0.16332 * (e5 * e7 * e11 * e13 * e14 * e15) - 0.098573 * (e5 * e7 * e12 * e13) + 0.04083 * (e5 * e7 * e12 * e13 * e14 * e15)
		- 0.16332 * (e5 * e7 * e14 * e15) + 0.16332 * (e5 * e7 * e8 * e9) - 0.16332 * (e5 * e7 * e8 * e9 * e11 * e13) + 0.06765 * (e5 * e7 * e8 * e9 * e11 * e13 * e14 * e15) - 0.04083 * (e5 * e7 * e8 * e9 * e12 * e13)
		+ 0.016912 * (e5 * e7 * e8 * e9 * e12 * e13 * e14 * e15) - 0.06765 * (e5 * e7 * e8 * e9 * e14 * e15) - 0.098573 * (e6 * e13)
		+ 0.04083 * (e6 * e13 * e14 * e15) + 0.098573 * (e6 * e7) - 0.098573 * (e6 * e7 * e11 * e13) + 0.04083 * (e6 * e7 * e11 * e13 * e14 * e15)
		- 0.04083 * (e6 * e7 * e14 * e15) + 0.04083 * (e6 * e7 * e8 * e9) - 0.04083 * (e6 * e7 * e8 * e9 * e11 * e13) + 0.016912 * (e6 * e7 * e8 * e9 * e11 * e13 * e14 * e15)
		- 0.016912 * (e6 * e7 * e8 * e9 * e14 * e15) - 0.04083 * (e6 * e8 * e9 * e13) + 0.016912 * (e6 * e8 * e9 * e13 * e14 * e15)
		- 0.098573 * (e7 * e11 * e12 * e13) + 0.04083 * (e7 * e11 * e12 * e13 * e14 * e15) - 0.098573 * (e7 * e12) + 0.04083 * (e7 * e12 * e14 * e15)
		- 0.04083 * (e7 * e8 * e9 * e11 * e12 * e13) + 0.016912 * (e7 * e8 * e9 * e11 * e12 * e13 * e14 * e15) - 0.04083 * (e7 * e8 * e9 * e12)
		+ 0.016912 * (e7 * e8 * e9 * e12 * e14 * e15) + 0.16332 * (e8 * e9) - 0.16332 * (e8 * e9 * e11 * e13) + 0.06765 * (e8 * e9 * e11 * e13 * e14 * e15)
		- 0.04083 * (e8 * e9 * e12 * e13) + 0.016912 * (e8 * e9 * e12 * e13 * e14 * e15) - 0.06765 * (e8 * e9 * e14 * e15);

	std::cout << (rotorXY == expected) << std::endl;
}
